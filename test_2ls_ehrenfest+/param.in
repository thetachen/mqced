#!/usr/bin/python
from units import AtomicUnit
from utility import *
AU = AtomicUnit()


#Options:
ShowAnimation = True
AveragePeriod = 10
UseInitialRandomPhase = False
NumberTrajectories = 2

# Set up time steps
T0 = 0.0
Tmax = 2.0/AU.fs * 100
dt = 1E-2/AU.fs * 100 /2
times = np.arange(T0, Tmax, dt)

param_EM={
    # Z coordinate grid parameters
    'Zlim':     [-300.0/AU.nm,300.0/AU.nm],
    'NZgrid':   600,
    # ABC pararmeters
    'Zo':       0.0/AU.nm,
    'Z0':       280.0/AU.nm ,
    'Z1':       290.0/AU.nm ,
}
param_EM['Zgrid'] = np.linspace(param_EM['Zlim'][0],param_EM['Zlim'][1], num=param_EM['NZgrid'])
param_EM['dZ'] = param_EM['Zgrid'][1]-param_EM['Zgrid'][0]
# start index for [Ex,Ey,Bx,By]
param_EM['_Ex'] = 0*param_EM['NZgrid']
param_EM['_Ey'] = 1*param_EM['NZgrid']
param_EM['_Bx'] = 2*param_EM['NZgrid']
param_EM['_By'] = 3*param_EM['NZgrid']
param_EM=Struct(**param_EM)

param_TLS={
    'nstates':  2,
    # Hamiltoniam
    'H0':		np.array([[0.0,0.0],\
                          [0.0,0.25]]),
	# Coupling 
    'VP':       np.array([[0.0,1.0],\
                          [1.0,0.0]]),
    # initial diabatic state vector
    'C0':				np.sqrt(np.array([[0.0],[1.0]],complex)),
    # polarization
    'Mu':       0.0,
    #'Sigma':    0.0556*(AU.nm**2),
    #'Pmax':     33824.0/AU.Cnmmol,
    'Sigma':    0.5,
    'Pmax':     0.025*np.sqrt(2.0),
}
param_TLS=Struct(**param_TLS)

